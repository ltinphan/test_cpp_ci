name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    # runs-on: [ubuntu-latest, windows-2016]
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest - MSVC", artifact: "windows-msvc.tar.xz",
            os: windows-latest,
            cc: "cl", cxx: "cl"
          }
        - {
            name: "Ubuntu-latest-GCC", artifact: "ubuntu-gcc-.tar.xz",
            os: ubuntu-latest,
            cc: "gcc-9", cxx: "g++-9"
          }
        - {
            name: "Ubuntu Latest - Clang", artifact: "ubuntu-clang.tar.xz",
            os: ubuntu-latest,
            cc: "clang-9", cxx: "clang++-9"
          }
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Create Build Linux Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      if: runner.os == 'Linux'
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Create Build Windows Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      if: runner.os == 'Windows'
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }}

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - uses: actions/upload-artifact@master
      with:
        name: ${{matrix.config.artifact}}
        path: ./${{ matrix.config.artifact}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest - MSVC", artifact: "windows-msvc.tar.xz",
            os: windows-latest,
            cc: "cl", cxx: "cl"
          }
        - {
            name: "Ubuntu-latest-GCC", artifact: "ubuntu-gcc-.tar.xz",
            os: ubuntu-latest,
            cc: "gcc-9", cxx: "g++-9"
          }
        - {
            name: "Ubuntu Latest - Clang", artifact: "ubuntu-clang.tar.xz",
            os: ubuntu-latest,
            cc: "clang-9", cxx: "clang++-9"
          }
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ matrix.config.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url

    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ matrix.config.artifact }}
        asset_name: ${{ matrix.config.artifact }}
        asset_content_type: application/x-gtar

  cpp_style_check:
    runs-on: ubuntu-latest
    name: Check C++ Style
    steps:
    - name: Checkout this commit
      uses: actions/checkout@v2
    - name: Run style checks
      uses: coleaeason/actions-uncrustify@v1
      with:
        configPath: 'cpp_style.cfg'